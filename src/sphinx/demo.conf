# We define a source, in this case only the connection parameters are set
source mysql_common
{
	type		= mysql
	sql_host	= 127.0.0.1
	sql_user	= sphinx
	sql_pass	= sspphhiinnxx001122
	sql_db		= sphinx_demo
	sql_port	= 3306
}

# The ':' means inheritance. The source 'municipios' inherits from 'mysql_common'
source municipios : mysql_common
{
	sql_query_pre	= SET NAMES utf8
	####################################################################################################################
	## Write the query that Sphinx will use to create the full-text search index.
	## Fields selected in the query will be used to create the index and search.
	##
	## The first field will be used for Sphinx to identify the matching rows when returning results.
	## It's mandatory to have an id.
	####################################################################################################################
	sql_query	= \
	 SELECT \
	 	m.id_municipio,  \
	 	m.id_provincia,  \
	 	m.cod_municipio,  \
	 	m.DC,  \
	 	m.nombre as municipio, \
     	p.provincia \
     FROM \
     	municipios m \
     	LEFT JOIN provincias p USING(id_provincia);

    ####################################################################################################################
    ## Attributes are values associated with each document that can be used to perform
    ## filtering and sorting during search. This values are included in the results, together
    ## with the id and the weight of the row, and they need to be selected in the query above.
    ## Keep in mind that these attributes are not used for searching/querying. Sphinx won't search on
    ## fields selected in the query that are marked as attributes.
    ##
    ## We can add as many attributes as we need.
    ## For example, to add the field 'id_provincia' as attribute so Sphinx returns its value, we can
    ## add it like this:
    ##
    ##      sql_attr_uint = id_provincia
    ##
    ## If we want to both add an attribute, and use it for searching/querying at the same time, we can add
    ## a field declaration. To do this we use sql_field_string. For example if we want to search by 'municipio'
    ## and use alphabetical order for the 'municipio' name, we can declare it like:
    ##
    ##      sql_field_string = municipio
    ##
    ##
    ####################################################################################################################
	sql_field_string	= municipio
	sql_attr_uint		= id_provincia
}

# Let's create our index
index municipios
{
	source			= municipios
	path			= /var/lib/sphinx/data/municipios
	charset_type	= utf-8
	######################################################################################################################
	## We can define a morphology preprocessor to replace different forms of the same word with the base, normalized form.
	## For instance, when the spanish word 'completar' is indexed, Sphinx will reduce the word to the 'stem',
	## so it will match when we search for 'completo', 'completamente', etc.
	######################################################################################################################
	morphology		= libstemmer_es
	# Only those words that are longer will be indexed. If min_word_len is 4, then 'the' won't be indexed, but 'they' will be.
	min_word_len	= 2
	# If we enable html_strip, sphinx queries won't match against html tag names like html, body, div...
	html_strip      = 0
	#############################################################################
	## We can use wildcards in Sphinx to match substrings, like 'bar' inside 'barcelona'. To do this,
	## we set enable_star to 1, and if the user searchs for 'bar', we really query sphinx for 'bar*',
	## or even '*bar*'.
	## If we want to use the wildcard before and after the keyword, we need to also set a min_infix_len.
	## If we only want to use the wildcard after the keyword, we just need to set min_prefix_len.
	## We can only use one of them at the same time.
	## Queries shorter than those minumuns won't return any results.
	#############################################################################
	enable_star     = 1
	#min_prefix_len=2
	#min_infix_len=3
	#############################################################################
	## This table will tell Sphinx which characters are equivalent, and it's useful to make letters with
	## accents equivalent to letters without accents, so if you search 'GavÃ ', it will return
	## the same results as searching for 'Gava'.
	## If we don't need this equivalence, we just omit the charset_table.
	#############################################################################
	charset_table   = 0..9, A..Z->a..z, _, -, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F, \
    U+C7->U+E7, U+E7, \
    U+D1->U+F1, U+F1, \
    U+DD->y, U+FD->y, \
    U+C0->a, U+C1->a, U+C2->a, U+C3->a, U+C4->a, U+C5->a, \
    U+E0->a, U+E1->a, U+E2->a, U+E3->a, U+E4->a, U+E5->a, \
    U+C8->e, U+C9->e, U+CA->e, U+CB->e, \
    U+E8->e, U+E9->e, U+EA->e, U+EB->e, \
    U+CC->i, U+CD->i, U+CE->i, U+CF->i, \
    U+EC->i, U+ED->i, U+EE->i, U+EF->i, \
    U+D2->o, U+D3->o, U+D4->o, U+D5->o, U+D6->o, \
    U+F2->o, U+F3->o, U+F4->o, U+F5->o, U+F6->o, \
    U+D9->u, U+DA->u, U+DB->u, U+DC->u, \
    U+F9->u, U+FA->u, U+FB->u, U+FC->u

}

#############################################################################
## indexer settings
#############################################################################

indexer
{
	mem_limit			= 128M
}

#############################################################################
## searchd settings
#############################################################################

searchd
{
	listen			= 9312
	#SphinxQL
	listen			= 9313:mysql41
	log			= /var/lib/sphinx/log/searchd-municipios.log
	query_log	= /var/lib/sphinx/log/query-municipios.log
	pid_file	= /var/lib/sphinx/run/searchd-municipios.pid
	collation_server    = utf8_general_ci
	read_timeout		= 5
	client_timeout		= 300
	max_children		= 40
	workers 			= prefork
	dist_threads = 2
	max_matches			= 10000
	seamless_rotate		= 1
	preopen_indexes		= 1
	unlink_old			= 1
	mva_updates_pool	= 1M
	max_packet_size		= 8M
	max_filters			= 256
	max_filter_values	= 4096
}